// Generated by CoffeeScript 1.6.3
/*
 ParticleController maintains the "Bubble" Particle System
 It utilizes the toxiclibs physics library to simulate these forces
*/


(function() {
  define(['util/ParticleFactory'], function(ParticleFactory) {
    var ParticleController;
    return ParticleController = (function() {
      function ParticleController(container) {
        this.container = container;
        this.MAX_PARTICLES = 12;
        this.physics = new VerletPhysics2D();
        this.physics.setDrag(0.1);
        this.physics.addBehavior(new GravityBehavior(new Vec2D(-0.02, 0)));
      }

      ParticleController.prototype.addParticle = function() {
        var p, randLoc, uid;
        randLoc = Vec2D.randomVector().scale(5).addSelf(this.width / 2, this.height / 2);
        p = new VerletParticle2D(randLoc);
        uid = this.physics.particles.length - 1;
        p.view = ParticleFactory.create(uid.toString());
        p.view.x = p.x;
        p.view.y = p.y;
        this.container.addChild(p.view);
        p.view.particle = p;
        p.behavior = new AttractionBehavior(p, p.view.radius * 1.7, -1.5, 0.015);
        this.physics.addBehavior(p.behavior);
        return this.physics.addParticle(p);
      };

      ParticleController.prototype.removeParticle = function(p) {
        if (p == null) {
          p = null;
        }
        if (p === null) {
          p = this.physics.particles.shift();
        } else {
          this.physics.particles.splice(this.physics.particles.indexOf(p), 1);
        }
        this.physics.removeBehavior(p.behavior);
        this.physics.removeParticle(p);
        return p.view.destroy();
      };

      ParticleController.prototype.update = function() {
        var i, p, _i, _ref;
        if (this.physics.particles.length > this.MAX_PARTICLES) {
          this.removeParticle();
        }
        this.physics.update();
        for (i = _i = 0, _ref = this.physics.particles.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          p = this.physics.particles[i];
          p.view.x = p.x;
          p.view.y = p.y;
        }
      };

      ParticleController.prototype.resize = function(width, height) {
        var buffer;
        this.width = width;
        this.height = height;
        buffer = 500;
        return this.physics.setWorldBounds(new Rect(-this.width, this.height / 2 - buffer / 2, this.width * 3, buffer));
      };

      return ParticleController;

    })();
  });

  window.VerletPhysics2D = toxi.physics2d.VerletPhysics2D;

  window.VerletParticle2D = toxi.physics2d.VerletParticle2D;

  window.AttractionBehavior = toxi.physics2d.behaviors.AttractionBehavior;

  window.GravityBehavior = toxi.physics2d.behaviors.GravityBehavior;

  window.Vec2D = toxi.geom.Vec2D;

  window.Rect = toxi.geom.Rect;

}).call(this);
