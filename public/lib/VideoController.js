// Generated by CoffeeScript 1.6.3
/*
 Maintains local and remote video streams
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['ServiceManager'], function(ServiceManager) {
    var VideoController;
    VideoController = (function() {
      function VideoController() {
        this.videoSuccess = __bind(this.videoSuccess, this);
      }

      VideoController.prototype.init = function() {
        this.remoteVideos = [];
        if (PeerConnection) {
          return rtc.createStream({
            video: true,
            audio: false
          }, this.videoSuccess);
        }
      };

      VideoController.prototype.videoSuccess = function(stream) {
        var bgVideo,
          _this = this;
        bgVideo = document.getElementById("bgVideo");
        bgVideo.src = window.webkitURL.createObjectURL(stream);
        this.remoteVideos.push(bgVideo);
        rtc.on('add remote stream', function(stream, socketId) {
          var clone;
          console.log("New Video Stream Connected");
          clone = _this.cloneVideo('bgVideo', socketId);
          document.getElementById(clone.id).setAttribute("class", "");
          rtc.attachStream(stream, clone.id);
          return _this.remoteVideos.push(clone);
        });
        return rtc.on('disconnect stream', function(data) {
          return _this.removeVideo(data);
        });
      };

      VideoController.prototype.videoError = function() {};

      VideoController.prototype.cloneVideo = function(domId, socketId) {
        var clone, video;
        video = document.getElementById(domId);
        clone = video.cloneNode(false);
        clone.id = "remote" + socketId;
        document.getElementById('remoteVideos').appendChild(clone);
        return clone;
      };

      VideoController.prototype.removeVideo = function(socketId) {
        var video;
        video = document.getElementById('remote' + socketId);
        if (video) {
          this.remoteVideos.splice(remoteVideos.indexOf(video), 1);
          return video.parentNode.removeChild(video);
        }
      };

      return VideoController;

    })();
    return new VideoController();
  });

}).call(this);
